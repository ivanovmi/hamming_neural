#!/usr/bin/env python
# -- coding: utf-8 --

import neurolab.net
import neurolab.trans
import numpy as np

__author__ = 'michael & ivan'

# Создаем массив размерностью 10х40 (10 строк, 40 столбцов),
# и заполняем его единицами
# В нем будем хранить "идеальное" множество
target = np.ones((10, 40), dtype=np.float)

# Перечисляем элементы с 0 по 9.
target[0, :] = np.array([0, 1, 1, 1, 0,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         0, 1, 1, 1, 0])

target[1, :] = np.array([0, 0, 1, 0, 0,
                         0, 1, 1, 0, 0,
                         1, 0, 1, 0, 0,
                         0, 0, 1, 0, 0,
                         0, 0, 1, 0, 0,
                         0, 0, 1, 0, 0,
                         0, 0, 1, 0, 0,
                         1, 1, 1, 1, 1])

target[2, :] = np.array([0, 1, 1, 1, 0,
                         1, 0, 0, 0, 1,
                         0, 0, 0, 0, 1,
                         0, 0, 0, 0, 1,
                         0, 0, 1, 1, 0,
                         0, 1, 0, 0, 0,
                         1, 0, 0, 0, 0,
                         1, 1, 1, 1, 1])

target[3, :] = np.array([0, 1, 1, 1, 0,
                         1, 0, 0, 0, 1,
                         0, 0, 0, 0, 1,
                         0, 0, 1, 1, 0,
                         0, 0, 1, 1, 0,
                         0, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         0, 1, 1, 1, 0])

target[4, :] = np.array([0, 0, 1, 1, 0,
                         0, 1, 0, 1, 0,
                         1, 0, 0, 1, 0,
                         1, 0, 0, 1, 0,
                         1, 1, 1, 1, 1,
                         0, 0, 0, 1, 0,
                         0, 0, 0, 1, 0,
                         0, 0, 0, 1, 0])

target[5, :] = np.array([1, 1, 1, 1, 1,
                         1, 0, 0, 0, 0,
                         1, 0, 0, 0, 0,
                         0, 1, 1, 1, 0,
                         0, 0, 0, 0, 1,
                         0, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         0, 1, 1, 1, 0])

target[6, :] = np.array([0, 1, 1, 1, 0,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 0,
                         0, 1, 1, 1, 0,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         0, 1, 1, 1, 0])

target[7, :] = np.array([1, 1, 1, 1, 1,
                         0, 0, 0, 0, 1,
                         0, 0, 0, 1, 0,
                         0, 0, 1, 0, 0,
                         0, 0, 1, 0, 0,
                         0, 0, 1, 0, 0,
                         0, 0, 1, 0, 0,
                         0, 0, 1, 0, 0])

target[8, :] = np.array([0, 1, 1, 1, 0,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         0, 1, 1, 1, 0,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         0, 1, 1, 1, 0])

target[9, :] = np.array([0, 1, 1, 1, 0,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         0, 1, 1, 1, 1,
                         0, 0, 0, 0, 1,
                         1, 0, 0, 0, 1,
                         0, 1, 1, 1, 0])


def train(target):
    """
    Функция для создания и тренировки сети.
    :param target: "Идеальное" множество.
    :return: Нейронную сеть
    """
    neuron = neurolab.net.newhem(target,
                                 neurolab.trans.SatLinPrm(1, 0, 100), 1000)
    neuron.sim(target)
    return neuron


def get_output(input, target):
    """
    Функция для получения результата из сети.
    Сеть создается и обучается внутри функции.
    P.S. Для лабораторной работы сеть пересоздается каждый раз, в дальнейшем
    планируется вынести обучение сети, и производить его один раз во время
    запуска программы
    :param input: Множество, по которому
    мы хотим получить ответ из сети. Массив.
    :param target: "идеальное" обучающее множество.
    В нашем случае - массив 10х40
    :return: Возвращает массив, состоящий из 10 символов
    """
    neuron = train(target)
    output = neuron.sim([input])
    return output[0]
